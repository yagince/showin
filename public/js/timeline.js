// Generated by CoffeeScript 1.6.2
(function() {
  var Timeline, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.renderTimelines = function(url, listSelector, templateSelector, options) {
    if (options == null) {
      options = {};
    }
    return $.get(url).success(function(timelines) {
      var json;

      json = $.parseJSON($(timelines).text());
      onSuccess(json, listSelector, templateSelector, options);
      return data.iscrollview.refresh();
    });
  };

  root.timelineDetailHtml = function(timeline, templateSelector) {
    return new Timeline(timeline).toShowElement(templateSelector);
  };

  root.onSuccess = function(timelines, listSelector, templateSelector, options) {
    var prependElement;

    if (timelines.length !== 0) {
      $(listSelector).children().remove();
    }
    prependElement = "";
    $.each(timelines, function(i, timeline) {
      return prependElement += new Timeline(timeline, options).toElement(templateSelector);
    });
    return $(listSelector).prepend(prependElement).listview("refresh");
  };

  Timeline = (function() {
    function Timeline(timeline, options) {
      if (options == null) {
        options = {};
      }
      this.toShowElement = __bind(this.toShowElement, this);
      this.toElement = __bind(this.toElement, this);
      this.isRetweet = __bind(this.isRetweet, this);
      this.bodyWithLinks = __bind(this.bodyWithLinks, this);
      this.timeline = timeline;
      this.showUrl = options.showUrl;
    }

    Timeline.prototype.toRelativeTime = function(time) {
      var diff, diffHour, diffMinute;

      diff = new Date() - time;
      diffMinute = Math.floor(diff / (1000 * 60));
      if (diffMinute < 60) {
        return "" + diffMinute + "分前";
      }
      diffHour = Math.floor(diffMinute / 60);
      if (diffHour < 24) {
        return "" + diffHour + "時間前";
      }
      return "" + (time.getFullYear()) + "-" + (time.getMonth() + 1) + "-" + (time.getDate()) + " " + (time.getHours()) + ":" + (time.getMinutes());
    };

    Timeline.prototype.toDate = function(timeStr) {
      var datetimes;

      datetimes = timeStr.replace(" +0900", "").split(/[- :]/);
      return new Date(datetimes[0], datetimes[1] - 1, datetimes[2], datetimes[3], datetimes[4], datetimes[5]);
    };

    Timeline.prototype.bodyWithLinks = function(body) {
      var _tmp;

      _tmp = body;
      return _tmp.replace(/[htps]+:\/\/[a-z0-9-_]+\.[a-z0-9-_:~%&\?\/.=]+[^:\.,\)\s*$]/ig, function(url) {
        return '<a href="' + url + '?rho_open_target=_blank" target="_blank">' + url + '</a>';
      });
    };

    Timeline.prototype.isRetweet = function() {
      return !!this.timeline.original_data.retweeted_status;
    };

    Timeline.prototype.toElement = function(templateSelector) {
      this.timeline.relativeTime = this.toRelativeTime(this.toDate(this.timeline.created_at));
      this.timeline.isRetweet = this.isRetweet();
      return _.template($(templateSelector).text(), {
        timeline: this.timeline,
        showUrl: this.showUrl
      });
    };

    Timeline.prototype.toShowElement = function(templateSelector) {
      this.timeline.relativeTime = this.toRelativeTime(this.toDate(this.timeline.created_at));
      this.timeline.isRetweet = this.isRetweet();
      this.timeline.bodyWithLinks = this.bodyWithLinks(this.timeline.body);
      return _.template($(templateSelector).text(), {
        timeline: this.timeline
      });
    };

    return Timeline;

  })();

}).call(this);
